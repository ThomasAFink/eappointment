{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/block/digital-clock.js","js/block/notification-keyboard-handheld.js","js/element/form/preventFormResubmit.js","js/index.js","js/lib/baseview.js","js/lib/bindHandler.js","js/lib/dialogHandler.js","js/lib/errorHandler.js","js/lib/utils.js","js/page/main.js","js/page/newhash.js","js/page/process.js","js/settings.js","node_modules/js-cookie/src/js.cookie.js"],"names":[],"mappings":"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":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global setInterval */\nimport BaseView from '../lib/baseview';\n\nclass View extends BaseView {\n\n    constructor (element) {\n        super(element);\n        this.bindPublicMethods('initClock', 'setInterval');\n        console.log(\"Found digital clock\");\n        this.$.ready(this.setInterval);\n    }\n\n    initClock () {\n        var time=new Date();\n        var hour=time.getHours();\n        var minute=time.getMinutes();\n        var second=time.getSeconds();\n        var temp=hour;\n        if (second%2) temp+=((minute<10)? \":0\" : \":\")+minute;\n        else temp+=((minute<10)? \":0\" : \" \")+minute;\n        this.$.text(temp);\n    }\n\n    setInterval () {\n\tsetInterval(this.initClock, 1000);\n    }\n}\n\nexport default View;\n","\nimport BaseView from '../lib/baseview';\nimport $ from \"jquery\";\n\nclass View extends BaseView {\n\n\n    constructor (element) {\n        super(element);        \n        this.source = this.$.attr('id');        \n        if (this.source == \"waitingNumberPad\") {\n            this.minNumberLength = 1;\n        } else {\n            this.minNumberLength = 10;\n        }\n        \n        this.bindPublicMethods('appendNumber', 'deleteNumber', 'clearNumbers', 'checkNumber');\n        console.log(\"Found keyboard-handheld\");\n        this.$.find('button.ziffer').on('click', this.appendNumber);\n        this.$.find('button#removelastdigit').on('click', this.deleteNumber);\n        this.$.find('button#removealldigitsphone').on('click', this.clearNumbers);\n        this.$numberInput = this.$.find('.nummerneingabe');\n    }\n\n    appendNumber (event) {\n\tlet $content = $(event.target).closest('button');\n        let number = $content.text();\n        this.$numberInput.val(this.$numberInput.val() + '' + number);\n        this.checkNumber();\n        return false;\n    }\n\n    deleteNumber () {\n        this.$numberInput.val(this.$numberInput.val().replace(/.$/, ''));\n        this.checkNumber();\n        return false;\n    }\n\n    clearNumbers () {\n        this.$numberInput.val('');\n        this.checkNumber();\n        return false;\n    }\n\n    checkNumber () {\n        //console.log(this.$numberInput.val());\n        var number = this.$numberInput.val();\n        if (this.source == 'waitingNumberPad') {\n            number = number.replace(/^0+/, '');\n        }        \n        number = number.replace(/[^\\d]/g, '');\n        var $button = this.$.find('.nachtrag');\n        if (number.length >= this.minNumberLength) {\n            $button.removeClass('disabled').attr('disabled', false);\n        } else {\n            if (!$button.hasClass('disabled')) {\n                $button.addClass('disabled').attr('disabled', true);\n            }\n        }\n        this.$numberInput.val(number);\n    }\n\n}\n\nexport default View;\n","import $ from \"jquery\";\n\nconst preventFormResubmit = (element) => {\n    const $form = $(element)\n\n    $form.on('submit', (ev) => {\n        if ($form.data('submitted') === true) {\n          // Previously submitted - don't submit again\n          ev.stopPropagation();\n          ev.preventDefault();\n        } else {\n          // Mark it so that the next submit can be ignored\n          $form.data('submitted', true);\n        }\n\n    })\n}\n\nexport default preventFormResubmit\n","// --------------------------------------------------------\n// ZMS Ticketprinter behavior\n// --------------------------------------------------------\n\nimport 'babel-polyfill';\n\n// Import base libs\nimport window from \"window\";\nimport $ from \"jquery\";\nimport settings from './settings';\nimport { forceHttps } from './lib/utils'\n\n// Import Views\nimport Reload from \"./page/main\";\nimport GetHash from \"./page/newhash\";\nimport PrintDialog from \"./page/process\";\nimport DigitalTime from \"./block/digital-clock\";\nimport NotificationKeyboardHandheldView from \"./block/notification-keyboard-handheld\";\nimport preventFormResubmit from './element/form/preventFormResubmit'\n\n// Bind jQuery on $ for testing\nwindow.$ = $;\nwindow.bo = {\n    \"zmsticketprinter\": settings\n};\n\n// Init Views\n$('#newhash').each(function() { new GetHash(this);});\n$('#index, #message, #exception').each(function() { new Reload(this);});\n$('#process').each(function() { new PrintDialog(this);});\n$('.digitaluhr').each(function() { new DigitalTime(this);});\n$('.smsbox').each(function() { new NotificationKeyboardHandheldView(this);});\n\n// prevent resubmits\n$('form').each(function() {\n    preventFormResubmit(this);\n})\n\n// Say hello\nconsole.log(\"Welcome to the ZMS Ticketprinter interface...\");\n\n// Force https protocol\nforceHttps();\n","import $ from \"jquery\";\nimport ErrorHandler from './errorHandler';\nimport DialogHandler from './dialogHandler';\nimport { lightbox } from './utils';\n\nclass BaseView extends ErrorHandler {\n\n    constructor(element) {\n        super(element);\n        this.$main = $(element);\n    }\n\n    get $ () {\n        return this.$main;\n    }\n\n    static loadCallStatic(url, method = 'GET', data = null) {\n        const ajaxSettings = {\n            method\n        };\n        if (method === 'POST' || method === 'PUT') {\n            ajaxSettings.data = data;\n        }\n        return new Promise((resolve, reject) => {\n            $.ajax(url, ajaxSettings).done(responseData => {\n                resolve(responseData);\n            }).fail(err => {\n                console.log('XHR load error', url, err);\n                reject(err);\n            })\n        });\n    }\n\n    static loadDialogStatic (response, callback) {\n        const { lightboxContentElement, destroyLightbox } = lightbox(this.$main, () => {\n            destroyLightbox(),\n            callback()\n        });\n        new DialogHandler(lightboxContentElement, {\n            response: response,\n            callback: () => {\n                callback();\n                destroyLightbox();\n            }\n        })\n    }\n\n}\n\nexport default BaseView;\n","\n\nclass BindHandler {\n\n    bindPublicMethods (...methods) {\n        let object = this;\n        methods.forEach( function (method) {\n            if (typeof object[method] !== 'function') {\n                throw \"Method not found: \" + method;\n            }\n            object[method] = object[method].bind(object);\n        });\n    }\n}\n\nexport default BindHandler;\n","import $ from 'jquery';\n\nclass DialogHandler {\n\n    constructor (element, options) {\n        this.$main = $(element);\n        this.response = options.response;\n        this.callback = options.callback || (() => {});\n        this.parent = options.parent;\n        this.handleLightbox = options.handleLightbox || (() => {});\n        this.bindEvents();\n        this.render();\n    }\n\n    render() {\n        var content = $(this.response).filter('div.dialog');\n        if (content.length == 0) {\n            var message = $(this.response).find('div.dialog');\n            if (message.length > 0) {\n                content = message.get(0).outerHTML;\n            }\n        }\n        this.$main.html(content);\n    }\n\n    bindEvents() {\n        this.$main.off().on('click', '.button-ok', (ev) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.callback(ev);\n        }).on('click', '.button-abort', (ev) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.handleLightbox();\n        }).on('click', '.button-callback', (ev) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            var callback = $(ev.target).data('callback');\n            this.callback = this.parent[callback];\n            this.callback(ev);\n        });\n    }\n}\n\nexport default DialogHandler\n","\nimport BindHandler from \"./bindHandler\";\n\nclass ErrorHandler extends BindHandler {\n    constructor() {\n        super();\n        this._errorHandler = function() {};\n    }\n\n    get errorHandler () {\n        return this._errorHandler;\n    }\n    set errorHandler (callback) {\n        this._errorHandler = callback;\n    }\n}\n\nexport default ErrorHandler;\n","import $ from 'jquery'\nimport Baseview from './baseview';\nimport settings from '../settings';\n\nconst lightboxHtml = '<div class=\"lightbox\"><div class=\"lightbox__content\"></div></div>'\n\nexport const lightbox = (parentElement, onBackgroundClick) => {\n    const lightboxElement = $(lightboxHtml)\n\n    if (!parentElement) {\n        parentElement = $('body')\n        lightboxElement.addClass('fixed')\n    }\n\n    const destroyLightbox = () => {\n        lightboxElement.off()\n        lightboxElement.remove()\n    }\n\n    const lightboxContentElement = lightboxElement.find('.lightbox__content');\n\n    lightboxElement.on('click', (ev) => {\n        //console.log('background click', ev);\n        ev.stopPropagation()\n        ev.preventDefault()\n        destroyLightbox()\n        onBackgroundClick()\n    }).on('click', '.lightbox__content', (ev) => {\n        ev.stopPropagation();\n    })\n\n\n    if ($(parentElement).find('.lightbox').length) {\n        $(parentElement).find('.lightbox').remove();\n    }\n    $(parentElement).append(lightboxElement)\n\n    return {\n        lightboxContentElement,\n        destroyLightbox\n    }\n}\n\nexport const forceHttps = () => {\n    if (document.location.protocol !== \"https:\") {\n        Baseview.loadCallStatic(`${settings.includeUrl}/dialog/?template=force_https`).then((response) => {\n            Baseview.loadDialogStatic(response, () => {\n                document.location.href = \"https://\" + document.location.href.substring(document.location.protocol.length, document.location.href.length);\n            });\n        });\n    }\n\n}\n","/* global setInterval */\nimport BaseView from '../lib/baseview';\nimport window from \"window\";\n\nclass View extends BaseView {\n\n    constructor (element) {\n        super(element);\n        this.bindPublicMethods('setInterval', 'reloadPage');\n        console.log('Redirect to home url every 30 seconds');\n        this.$.ready(this.setInterval);\n    }\n\n    reloadPage () {\n        window.location.href = this.getUrl('/home/');\n    }\n\n    setInterval () {\n        var reloadTime = window.bo.zmsticketprinter.reloadInterval;\n        setInterval(this.reloadPage, reloadTime * 1000);\n    }\n\n    getUrl (relativePath) {\n        let includepath = window.bo.zmsticketprinter.includepath;\n        return includepath + relativePath;\n    }\n}\n\nexport default View;\n","/* global setTimeout */\nimport BaseView from '../lib/baseview';\nimport window from \"window\";\nimport cookie from \"js-cookie\";\nimport $ from \"jquery\";\n\nclass View extends BaseView {\n\n    constructor (element) {\n        super(element);\n        this.bindPublicMethods('load','setTimeout','getUrl','reloadPage');\n        $(window).on('load', this.load);\n    }\n\n    load () {\n        cookie.remove(\"Ticketprinter\", { secure: true });\n        this.setTimeout();\n    }\n\n    reloadPage () {\n        window.location.href = this.getUrl('/home/');\n    }\n\n    setTimeout () {\n        setTimeout(this.reloadPage, 5000);\n    }\n\n    getUrl (relativePath) {\n        let includepath = window.bo.zmsticketprinter.includepath;\n        return includepath + relativePath;\n    }\n}\n\nexport default View;\n","/* global setTimeout */\nimport BaseView from '../lib/baseview';\nimport window from \"window\";\n\nclass View extends BaseView {\n\n    constructor (element) {\n        super(element);\n        this.bindPublicMethods('printDialog', 'reload');\n        console.log('Print data and redirect to home url after presetted time');\n        this.$.ready(this.printDialog);\n    }\n\n    reload () {\n        window.location.href = this.getUrl('/home/');\n    }\n\n    getUrl (relativePath) {\n        let includepath = window.bo.zmsticketprinter.includepath;\n        return includepath + relativePath;\n    }\n\n    printDialog () {\n        document.title = \"Anmeldung an Warteschlange\";\n        window.print();\n\n        var beforePrint = () => {\n            console.log('start printing');\n        };\n        var afterPrint = () => {\n            let reloadTime = window.bo.zmsticketprinter.reloadInterval;\n            setTimeout(() => {\n                this.reload();\n            }, reloadTime * 1000); // default is 30\n        };\n\n        if (window.matchMedia) {\n            var mediaQueryList = window.matchMedia('print');\n            mediaQueryList.addListener(function(mql) {\n                if (mql.matches) {\n                    beforePrint();\n                } else {\n                    afterPrint();\n                }\n            });\n        }\n\n        window.onbeforeprint = beforePrint;\n        window.onafterprint = afterPrint;\n    }\n}\n\nexport default View;\n","export default {\n    'reloadInterval': 30,\n    'animationEnd': 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend',\n    'includeUrl': '/terminvereinbarung/ticketprinter'\n};\n","/*!\n * JavaScript Cookie v2.2.0\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;(function (factory) {\n\tvar registeredInModuleLoader = false;\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (!registeredInModuleLoader) {\n\t\tvar OldCookies = window.Cookies;\n\t\tvar api = window.Cookies = factory();\n\t\tapi.noConflict = function () {\n\t\t\twindow.Cookies = OldCookies;\n\t\t\treturn api;\n\t\t};\n\t}\n}(function () {\n\tfunction extend () {\n\t\tvar i = 0;\n\t\tvar result = {};\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar attributes = arguments[ i ];\n\t\t\tfor (var key in attributes) {\n\t\t\t\tresult[key] = attributes[key];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction init (converter) {\n\t\tfunction api (key, value, attributes) {\n\t\t\tvar result;\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Write\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tattributes = extend({\n\t\t\t\t\tpath: '/'\n\t\t\t\t}, api.defaults, attributes);\n\n\t\t\t\tif (typeof attributes.expires === 'number') {\n\t\t\t\t\tvar expires = new Date();\n\t\t\t\t\texpires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);\n\t\t\t\t\tattributes.expires = expires;\n\t\t\t\t}\n\n\t\t\t\t// We're using \"expires\" because \"max-age\" is not supported by IE\n\t\t\t\tattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n\n\t\t\t\ttry {\n\t\t\t\t\tresult = JSON.stringify(value);\n\t\t\t\t\tif (/^[\\{\\[]/.test(result)) {\n\t\t\t\t\t\tvalue = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (!converter.write) {\n\t\t\t\t\tvalue = encodeURIComponent(String(value))\n\t\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = converter.write(value, key);\n\t\t\t\t}\n\n\t\t\t\tkey = encodeURIComponent(String(key));\n\t\t\t\tkey = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n\t\t\t\tkey = key.replace(/[\\(\\)]/g, escape);\n\n\t\t\t\tvar stringifiedAttributes = '';\n\n\t\t\t\tfor (var attributeName in attributes) {\n\t\t\t\t\tif (!attributes[attributeName]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstringifiedAttributes += '; ' + attributeName;\n\t\t\t\t\tif (attributes[attributeName] === true) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstringifiedAttributes += '=' + attributes[attributeName];\n\t\t\t\t}\n\t\t\t\treturn (document.cookie = key + '=' + value + stringifiedAttributes);\n\t\t\t}\n\n\t\t\t// Read\n\n\t\t\tif (!key) {\n\t\t\t\tresult = {};\n\t\t\t}\n\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all. Also prevents odd result when\n\t\t\t// calling \"get()\"\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\n\t\t\tvar rdecode = /(%[0-9A-Z]{2})+/g;\n\t\t\tvar i = 0;\n\n\t\t\tfor (; i < cookies.length; i++) {\n\t\t\t\tvar parts = cookies[i].split('=');\n\t\t\t\tvar cookie = parts.slice(1).join('=');\n\n\t\t\t\tif (!this.json && cookie.charAt(0) === '\"') {\n\t\t\t\t\tcookie = cookie.slice(1, -1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar name = parts[0].replace(rdecode, decodeURIComponent);\n\t\t\t\t\tcookie = converter.read ?\n\t\t\t\t\t\tconverter.read(cookie, name) : converter(cookie, name) ||\n\t\t\t\t\t\tcookie.replace(rdecode, decodeURIComponent);\n\n\t\t\t\t\tif (this.json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key === name) {\n\t\t\t\t\t\tresult = cookie;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!key) {\n\t\t\t\t\t\tresult[name] = cookie;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tapi.set = api;\n\t\tapi.get = function (key) {\n\t\t\treturn api.call(api, key);\n\t\t};\n\t\tapi.getJSON = function () {\n\t\t\treturn api.apply({\n\t\t\t\tjson: true\n\t\t\t}, [].slice.call(arguments));\n\t\t};\n\t\tapi.defaults = {};\n\n\t\tapi.remove = function (key, attributes) {\n\t\t\tapi(key, '', extend(attributes, {\n\t\t\t\texpires: -1\n\t\t\t}));\n\t\t};\n\n\t\tapi.withConverter = init;\n\n\t\treturn api;\n\t}\n\n\treturn init(function () {});\n}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}