{
	"/availability/{id}/": {
		"get": {
			"description": "Get an availability by id",
			"parameters": [
				{
					"name": "id",
					"description": "availability number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/availability.json"
							}
						}
					}
				},
				"404": {
					"description": "availability id does not exists"
				}
			}
		},
		"post": {
			"description": "Update an availability",
			"parameters": [
				{
					"name": "id",
					"description": "availability number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "availability",
					"description": "availability data to update",
					"in": "body",
					"schema": {
						"$ref": "schema/availability.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/availability.json"
							}
						}
					}
				},
				"404": {
					"description": "availability id does not exists"
				}
			}
		},
		"delete": {
			"description": "Deletes an availability",
			"parameters": [
				{
					"name": "id",
					"description": "availability number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success, returns deleted object",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/availability.json"
							}
						}
					}
				},
				"404": {
					"description": "availability id does not exists"
				}
			}
		}
	},
	"/calendar/": {
		"post": {
			"description": "Get a list of available days for appointments",
			"parameters": [
				{
					"name": "calendar",
					"description": "data for finding available days",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/calendar.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "get an updated calendar objects with updated days list",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/calendar.json"
							}
						}
					}
				},
				"404": {
					"description": "Could not find any available days",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/calendar.json"
							}
						}
					}
				}
			}
		}
	},
	"/calldisplay/": {
		"post": {
			"description": "Get preferences for a calldisplay",
			"parameters": [
				{
					"name": "calldisplay",
					"description": "data containing scopes and clusters",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/calldisplay.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "get an updated calendar objects with updated days list",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/calldisplay.json"
							}
						}
					}
				},
				"404": {
					"description": "Could not find a given cluster or scope, see metaresult",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							}
						}
					}
				}
			}
		}
	},
	"/calldisplay/queue/": {
		"post": {
			"description": "Get queue for a calldisplay",
			"parameters": [
				{
					"name": "calldisplay",
					"description": "data containing scopes and clusters",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/calldisplay.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "get a list of queue entries",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/queue.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "Could not find a given cluster or scope, see metaresult",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							}
						}
					}
				}
			}
		}
	},
	"/cluster/{id}/": {
		"get": {
			"description": "Get an cluster by id",
			"parameters": [
				{
					"name": "id",
					"description": "cluster number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/cluster.json"
							}
						}
					}
				},
				"404": {
					"description": "cluster id does not exists"
				}
			}
		},
		"post": {
			"description": "Update an cluster",
			"parameters": [
				{
					"name": "id",
					"description": "cluster number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "cluster",
					"description": "cluster data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/cluster.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/cluster.json"
							}
						}
					}
				},
				"404": {
					"description": "cluster id does not exists"
				}
			}
		},
		"delete": {
			"description": "Deletes an cluster",
			"parameters": [
				{
					"name": "id",
					"description": "cluster number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success"
				},
				"404": {
					"description": "cluster id does not exists"
				}
			}
		}
	},
	"/cluster/{id}/queue/": {
		"get": {
			"description": "Get a waiting queue for a cluster",
			"parameters": [
				{
					"name": "id",
					"description": "cluster number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/queue.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "cluster id does not exists"
				}
			}
		}
	},
	"/dayoff/{year}/": {
		"get": {
			"description": "Update list of common free days",
			"parameters": [
				{
					"name": "year",
					"description": "year for the free days",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/dayoff.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "year out of range"
				}
			}
		},
		"post": {
			"description": "Update list of common free days",
			"parameters": [
				{
					"name": "year",
					"description": "year for the free days",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "dayoff",
					"description": "dayoff data to update",
					"in": "body",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "schema/dayoff.json"
						}
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/dayoff.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "year out of range"
				}
			}
		}
	},
	"/department/": {
		"get": {
			"description": "Get a list of organisations",
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/department.json"
								}
							}
						}
					}
				}
			}
		}
	},
	"/department/{id}/": {
		"get": {
			"description": "Get an department by id",
			"parameters": [
				{
					"name": "id",
					"description": "department number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/department.json"
							}
						}
					}
				},
				"404": {
					"description": "department id does not exists"
				}
			}
		},
		"post": {
			"description": "Update an department",
			"parameters": [
				{
					"name": "id",
					"description": "department number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "department",
					"description": "department data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/department.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/department.json"
							}
						}
					}
				},
				"404": {
					"description": "department id does not exists"
				}
			}
		},
		"delete": {
			"description": "Deletes an department",
			"parameters": [
				{
					"name": "id",
					"description": "department number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success"
				},
				"404": {
					"description": "department id does not exists"
				}
			}
		}
	},
	"/mails/": {
		"get": {
			"description": "get a list of mails in the send queue",
			"responses": {
				"200": {
					"description": "returns a list, might be empty",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/mail.json"
								}
							}
						}
					}
				}
			}
		},
		"post": {
			"description": "Add a mail to the send queue",
			"parameters": [
				{
					"name": "notification",
					"description": "mail data to send",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/mail.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "mail accepted",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/mail.json"
								}
							}
						}
					}
				},
				"400": {
					"description": "Missing required properties in the notification"
				}
			}
		}
	},
	"/mails/{id}/": {
		"delete": {
			"description": "delete a mail in the send queue",
			"parameters": [
				{
					"name": "id",
					"description": "mail number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "succesfully deleted"
				},
				"404": {
					"description": "could not find mail or mail already sent"
				}
			}
		}
	},
	"/notification/": {
		"get": {
			"description": "get a list of notifications in the send queue",
			"responses": {
				"200": {
					"description": "returns a list, might be empty",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/notification.json"
								}
							}
						}
					}
				}
			}
		},
		"post": {
			"description": "Add a notification to the send queue",
			"parameters": [
				{
					"name": "notification",
					"description": "notification data to send",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/notification.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "notification accepted"
				},
				"400": {
					"description": "Missing required properties in the notification"
				}
			}
		}
	},
	"/notification/{id}/": {
		"delete": {
			"description": "delete a notification in the send queue",
			"parameters": [
				{
					"name": "id",
					"description": "notification number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "succesfully deleted"
				},
				"404": {
					"description": "could not find notification or notification already sent"
				}
			}
		}
	},
	"/organisation/": {
		"get": {
			"description": "Get a list of organisations",
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/organisation.json"
								}
							}
						}
					}
				}
			}
		}
	},
	"/organisation/{id}/": {
		"get": {
			"description": "Get an organisation by id",
			"parameters": [
				{
					"name": "id",
					"description": "organisation number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/organisation.json"
							}
						}
					}
				},
				"404": {
					"description": "organisation id does not exists"
				}
			}
		},
		"post": {
			"description": "Update an organisation",
			"parameters": [
				{
					"name": "id",
					"description": "organisation number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "organisation",
					"description": "organisation data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/organisation.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/organisation.json"
							}
						}
					}
				},
				"404": {
					"description": "organisation id does not exists"
				}
			}
		},
		"delete": {
			"description": "Deletes an organisation",
			"parameters": [
				{
					"name": "id",
					"description": "organisation number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success"
				},
				"404": {
					"description": "organisation id does not exists"
				}
			}
		}
	},
	"/organisation/{id}/hash/": {
		"get": {
			"description": "Get a hash to identify a ticketprinter. Usually a browser requests a hash once and stores it in a cookie.",
			"parameters": [
				{
					"name": "id",
					"description": "organisation number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/ticketprinter.json"
							}
						}
					}
				},
				"404": {
					"description": "organisation id does not exists"
				}
			}
		}
	},
	"/process/{id}/{authKey}/": {
		"get": {
			"description": "Get a process",
			"parameters": [
				{
					"name": "id",
					"description": "process number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "authKey",
					"description": "authentication key",
					"in": "path",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/process.json"
							}
						}
					}
				},
				"403": {
					"description": "authkey does not match"
				},
				"404": {
					"description": "process id does not exists"
				}
			}
		},
		"post": {
			"description": "Update a process but does not send any mails or notifications on status changes",
			"parameters": [
				{
					"name": "id",
					"description": "process number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "authKey",
					"description": "authentication key",
					"in": "path",
					"required": true,
					"type": "string"
				},
				{
					"name": "process",
					"description": "process data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/process.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success, there might be changes on the object or added information. Use the response for further action with the process",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/process.json"
							}
						}
					}
				},
				"400": {
					"description": "Invalid input"
				},
				"403": {
					"description": "forbidden, authkey does not match or status changes, only data may be changed"
				},
				"404": {
					"description": "process id does not exists"
				}
			}
		},
		"delete": {
			"description": "Deletes a process but does not send any mails or notifications",
			"parameters": [
				{
					"name": "id",
					"description": "process number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "authKey",
					"description": "authentication key",
					"in": "path",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success, there might be changes on the object or added information. Use the response for further action with the process",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/process.json"
							}
						}
					}
				},
				"403": {
					"description": "authkey does not match"
				},
				"404": {
					"description": "process id does not exists"
				}
			}
		}
	},
	"/process/{id}/{authKey}/ics/": {
		"get": {
			"description": "Get an ICS-File for a process",
			"parameters": [
				{
					"name": "id",
					"description": "process number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "authKey",
					"description": "authentication key",
					"in": "path",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "object",
								"properties": {
									"content": {
										"type": "string",
										"description": "base64 encoded ICS file"
									}
								}
							}
						}
					}
				},
				"403": {
					"description": "authkey does not match"
				},
				"404": {
					"description": "process id does not exists"
				}
			}
		}
	},
	"/process/status/free/": {
		"post": {
			"description": "Get a list of free processes for a given day",
			"parameters": [
				{
					"name": "calendar",
					"description": "data for finding available processes, try to restrict data to one day, if possible",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/calendar.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "get a list of available processes",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/process.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "Could not find any available processes, returns empty list",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "schema/process.json"
						}
					}
				}
			}
		}
	},
	"/process/status/reserved/": {
		"get": {
			"description": "Get a list of reserved processes",
			"responses": {
				"200": {
					"description": "get a list of processes",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/process.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "Could not find any processes, returns empty list",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"type": "object"
								}
							}
						}
					}
				}
			}
		},
		"post": {
			"description": "Try to reserve the appointments in a process",
			"parameters": [
				{
					"name": "process",
					"description": "process data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/process.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "get a list of processes",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/process.json"
							}
						}
					}
				},
				"400": {
					"description": "Invalid input"
				},
				"403": {
					"description": "authkey does not match"
				},
				"404": {
					"description": "Could not find any processes, returns empty list"
				}
			}
		}
	},
	"/process/status/confirmed/": {
		"post": {
			"description": "Try to confirm a process, changes status from reservered to confirmed",
			"parameters": [
				{
					"name": "process",
					"description": "process data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/process.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "process is confirmed, notifications and mails sent according to preferences",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/process.json"
								}
							}
						}
					}
				},
				"302": {
					"description": "Redirects to /processes/status/reserved/ since the given process does not exists in the list (any longer)"
				},
				"400": {
					"description": "Invalid input"
				},
				"403": {
					"description": "authkey does not match"
				}
			}
		}
	},
	"/scope/": {
		"get": {
			"description": "Get a list of scopes",
			"responses": {
				"200": {
					"description": "returns a list",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/scope.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "no scopes defined yet"
				}
			}
		}
	},
	"/scope/{id}/": {
		"get": {
			"description": "Get a scope",
			"parameters": [
				{
					"name": "id",
					"description": "scope number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/scope.json"
							}
						}
					}
				},
				"404": {
					"description": "scope id does not exists"
				}
			}
		},
		"post": {
			"description": "Update a scope",
			"parameters": [
				{
					"name": "id",
					"description": "scope number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "scope",
					"description": "scope content",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "schema/scope.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/scope.json"
							}
						}
					}
				},
				"400": {
					"description": "Invalid input"
				},
				"404": {
					"description": "process id does not exists"
				}
			}
		},
		"delete": {
			"description": "Delete a scope",
			"parameters": [
				{
					"name": "id",
					"description": "scope number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success"
				},
				"404": {
					"description": "scope id does not exists"
				}
			}
		}
	},
	"/scope/{id}/availability/": {
		"get": {
			"description": "Get a list of availability entries",
			"parameters": [
				{
					"name": "id",
					"description": "scope number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/availability.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "scope id does not exists"
				}
			}
		}
	},
	"/scope/{id}/queue/": {
		"get": {
			"description": "Get a waiting queue for a scope",
			"parameters": [
				{
					"name": "id",
					"description": "scope number",
					"in": "path",
					"required": true,
					"type": "integer"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/queue.json"
								}
							}
						}
					}
				},
				"404": {
					"description": "scope id does not exists"
				}
			}
		}
	},
	"/status/": {
		"get": {
			"description": "Get status of api",
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"$ref": "schema/status.json"
					}
				}
			}
		}
	},
	"/ticketprinter/{id}/waitingnumber/": {
		"get": {
			"description": "Get a waitingNumber according to scope preferences",
			"parameters": [
				{
					"name": "id",
					"description": "scope number",
					"in": "path",
					"required": true,
					"type": "integer"
				},
				{
					"name": "ticketprinter",
					"description": "ticketprinter data, a valid hash is required",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "schema/ticketprinter.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/process.json"
							}
						}
					}
				},
				"403": {
					"description": "hash is not valid"
				},
				"404": {
					"description": "ticketprinter id does not exists"
				}
			}
		}
	},
	"/useraccount/": {
		"get": {
			"description": "Get a list of useraccounts",
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"type": "array",
								"items": {
									"$ref": "schema/useraccount.json"
								}
							}
						}
					}
				}
			}
		}
	},
	"/useraccount/{loginname}/": {
		"get": {
			"description": "Get an useraccount by loginname",
			"parameters": [
				{
					"name": "loginname",
					"description": "useraccount number",
					"in": "path",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/useraccount.json"
							}
						}
					}
				},
				"404": {
					"description": "useraccount loginname does not exists"
				}
			}
		},
		"post": {
			"description": "Update an useraccount",
			"parameters": [
				{
					"name": "loginname",
					"description": "useraccount number",
					"in": "path",
					"required": true,
					"type": "string"
				},
				{
					"name": "useraccount",
					"description": "useraccount data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/useraccount.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/useraccount.json"
							}
						}
					}
				},
				"404": {
					"description": "useraccount loginname does not exists"
				}
			}
		},
		"delete": {
			"description": "Deletes an useraccount",
			"parameters": [
				{
					"name": "loginname",
					"description": "useraccount number",
					"in": "path",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success"
				},
				"404": {
					"description": "useraccount loginname does not exists"
				}
			}
		}
	},
	"/workstation/": {
		"get": {
			"description": "Get the current workstation based on authkey",
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/workstation.json"
							}
						}
					}
				},
				"401": {
					"description": "login required"
				}
			}
		},
		"post": {
			"description": "Update a workstation, e.g. to change the scope",
			"parameters": [
				{
					"name": "workstation",
					"description": "workstation data to update",
					"required": true,
					"in": "body",
					"schema": {
						"$ref": "schema/workstation.json"
					}
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/workstation.json"
							}
						}
					}
				},
				"401": {
					"description": "login required"
				}
			}
		}
	},
	"/workstation/{loginname}/": {
		"post": {
			"description": "Create a workstation for an username, used to login",
			"parameters": [
				{
					"name": "loginname",
					"description": "useraccount identifier, usually the unique loginname",
					"in": "path",
					"required": true,
					"type": "string"
				},
				{
					"name": "password",
					"description": "password to verify user",
					"in": "formData",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/workstation.json"
							}
						}
					}
				},
				"404": {
					"description": "useraccount loginname does not exists"
				}
			}
		},
		"delete": {
			"description": "Logout a user and delete his workstation entry",
			"parameters": [
				{
					"name": "loginname",
					"description": "useraccount number",
					"in": "path",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"200": {
					"description": "success",
					"schema": {
						"type": "object",
						"properties": {
							"meta": {
								"$ref": "schema/metaresult.json"
							},
							"data": {
								"$ref": "schema/workstation.json"
							}
						}
					}
				},
				"404": {
					"description": "useraccount loginname does not exists"
				}
			}
		}
	}
}