#!/usr/bin/env php
<?php
/**
 * Download and validate json files
 */
$localInclude = __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR .  'vendor';
$modulInclude = __DIR__ . str_repeat(DIRECTORY_SEPARATOR . '..', 3);
set_include_path(get_include_path() . PATH_SEPARATOR . $localInclude . PATH_SEPARATOR . $modulInclude);
require('autoload.php');

use Garden\Cli\Cli;
use \Httpful\Request;

$cli = new Cli();

$cli->description("Downloads json files from the official site and validates them and replaces the old files.")
    ->opt('output:o', 'Path to save files', true)
    ->opt('proxy:p', 'Proxy server like "proxy:3128"', false)
    ;
$args = $cli->parse($argv, true);

$destinationPath = realpath($args->getOpt('output'));

if (!is_writeable($destinationPath) || !is_dir($destinationPath)) {
    echo $cli->red("$destinationPath should be a writeable directory\n");
    exit(1);
}

$baseDomain = "http://example.com/";
$client = Request::init()
    ->withoutAutoParsing()
    ->followRedirects()
    ->timeout(30);
Request::ini($client);
$proxy = $args->getOpt('proxy');
if ($proxy) {
    $proxyconf = array();
    preg_match('#^(?:(?P<user>[^:]+):(?P<pass>[^@]+)@)?(?P<host>[^:]+):?(?P<port>\d+)?$#', $proxy, $proxyconf);
    $proxyconf = array_merge($proxyconf, array('host' => '','port' => '80','user' => false,'pass' => false));
    if ($proxyconf['user']) {
        $client->useProxy(
            $proxyconf['host'],
            $proxyconf['port'],
            CURLAUTH_BASIC,
            $proxyconf['user'],
            $proxyconf['pass']
        );
    } else {
        $client->useProxy($proxyconf['host'], $proxyconf['port']);
    }
}

$downloads = array(
    array(
        'url' => '/standorte/export/simple/json',
        'file' => 'locations_de.json',
    ),
    array(
        'url' => '/dienstleistungen/export/simple/json',
        'file' => 'services_de.json',
    ),
);
foreach ($downloads as $download) {
    $json = Request::get($baseDomain . $download['url'])
        //->followRedirects()
        ->send()
        ->body;
    $tmp = $destinationPath . DIRECTORY_SEPARATOR . 'tmp.' . $download['file'];
    file_put_contents($tmp, $json);
    $data = json_decode($json, true);
    if (array_key_exists('error', $data) && $data['error'] === false) {
        $dest = $destinationPath . DIRECTORY_SEPARATOR . $download['file'];
        rename($tmp, $dest);
    } else {
        echo $cli->red($baseDomain . $download['url'] . " did not validate, see temp file $tmp \n");
        exit(1);
    }
}
