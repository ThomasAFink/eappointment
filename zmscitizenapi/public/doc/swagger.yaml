swagger: "2.0"
info:
  title: ZMS (human waiting queue management) API
  x-logo:
    url: "./logo.png"
  description: |
      The ZMS system is intended to manage human waiting queues. It has the following features:

       * make appointments via a calender and initiate a process to manage an appointment
       * import requests (services) and providers (locations) from external sources
       * manage scopes for appointments, including a four level hierarchy of owner->organisation->department->scope
       * manage opening hours including closed days
       * login-system with different access levels
       * pickup for documents
       * ticketprinter support for customers without appointments (authenticated, lockable, timeable)
       * calldisplay support
       * collecting statistics like waiting time or served clients per day
       * emergency call for employees

       This documentation covers the API-level access to these features.

       ## Common parameters for requests

       ### Header X-JsonCompressLevel

       Setting the header "X-JsonCompressLevel" with a value of 1 or higher enables a json schema based compression. On a value of 1 and higher, default value for properties are omitted. To have a combine the default values in the entity schema with the response. With a value of 2 and higher (not implemented yet), repeating values are referenced inline with a "$ref" property. A JSON-Schema dereferencing is required.

       This header is useful on results with a lot of items.

       ### Parameter resolveReferences

       Most calls support the parameter "resolveReferences". Usually by fetching an entity, it includes an amount of sub entities. For example, a department has a list of scopes. Fetching a department usually does not include the scopes. If you need the scopes of the department, use the parameter "resolveReferences" with a value of 1. This resolves one level of sub entities. If you need for example the availabilities (opening hours) of the scopes, use a value of 2 to fetch two sublevels of entities. Beware, that a high value results in a lot of data which might be redundant.

       Why using a parameter like this and not different api calls? The overhead for an api call is usually on around 20ms. Fetching a list for different entities can easily result in 20 additional requests to fetch the required data. So using this parameter might result having a 10 times higher performance compared to mulitple calls.

       ### Experimental GraphQL parameter

       There is an experimental "gql" parameter to reduce the download size of fetched data. Sometimes only a part of the data is required for the desired operation. This parameter supports a simplified GraphQL query. It is experimental in a sense, that the amount of the supported GraphQL features might change.

       Currently only the selection of desired fields are supported. To get a scope with only the ID and the name, a query like this accomplishes this.

       `/api/2/scope/141/?gql={id+contact{name}}`

       As difference to the GraphQL implementation, a whole sub section might be retrieved by not adding details. But beware of using this, for a stricter GraphQL implementation in the future might break this behavior. To get all contents of `scope.contact` a query like this currently solves this.

       `/api/2/scope/141/?gql={id+contact}`

       The API is currently not GraphQL compatible. A request does not get faster on the server for requesting not every property. But there might be a performance increase on the client side for there is less data to download and decode.
       
  termsOfService: 'http://service.berlin.de/terminvereinbarung/'
  contact:
    name: Mathias Fischer
    email: mathias.fischer@berlinonline.de
    url: 'http://www.berlinonline.net/unternehmen/team/'
  license:
    name: Commercial
    url: 'http://www.berlinonline.net'
  version: '2.25.00-muc11-197-gfc1f0d011'
basePath: /terminvereinbarung/api/2
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  httpauth:
    type: basic
    description: |
        The API uses two variants of authentication. An application can use basic authentication via HTTP for identification. As an alternative, there is a header with the name "X-Authkey". This key can be optained by accessing "/workstation/login/".

        According to the application settings, there might be different rights to use API methods. Further rights depend on the settings for the authorized useraccount.
security:
    - httpauth: []
tags:
  - name: apikey
    description: |
      Über einen "apikey" erhält man Zugriff zu der Terminbuchung. Die Eigenschaft "key" wird für die meisten HTTP-Requests als Header `X-Auth-Key` benötigt.

      Eine Verifikation für einen apikey ist notwendig. Dies erfolgt in der Regel über ein Captcha. Über ein "clientkey" kann man aber auch erweiterte Berechtigungen erhalten, wie zum Beispiel Zugriff auf begrenzte Terminkontingente oder einen Verzicht auf das Captcha. Der "clientkey" wird vom Betreiber des Systems mitgeteilt. Ohne einen solchen "clientkey" werden Standard-Einstellungen verwendet.
      
      Weiterhin gehört zu einem apikey ein Quota für unterschiedliche Requests. Um Missbrauch der Schnittstelle zu vermeiden werden in unterschiedlichen Zeiteinheiten nur eine begrenzte Zahl von Requests zugelassen. Eine Information wieviele Requests noch frei sind, erhält man über den apikey.
  - name: calendar
    description: |
      Ein "calendar" repräsentiert eine Kalender-Ansicht. Diese beinhaltet zum einen die Details der Abfrage, wie für welchen Zeitraum der Kalender gilt und welche Leistungen and welchen Standorten buchbar sind. Als Antwort auf eine Anfrage enthält der Kalender Einträge zu Tagen, an denen Termine buchbar sind.

      Wichtig: Der "calendar" repräsentiert keinen Kalender eines Standortes oder ähnliches. Es handelt sich um ein temporäres Suchobjekt mit Suchergebnissen.
  - name: process
    description: |
      Unter "process" wird ein Vorgang im System verstanden. Ein solcher Vorgang enthält in der Regel einen Termin sowie Kontaktdaten zum Kunden und Details zum Standort des Termins.

      Ein "process" kann auch einen freien Termin repräsentieren. Dies lässt sich über die Eigenschaft `status` erkennen. Ein Status "free" bedeutet, dass es sich um einen freien Termin handelt, ein "reserved" kennzeichnet eine flüchtige Reservierung und ein Vorgang im Status "confirmed" entspricht einem gültigen Termin.
  - name: provider
    description: |
      Ein "provider" entspricht einem physischen Standort mit Ortsdaten wie Straße und Hausnummer und häufig Angaben, wo im entsprechenden Gebäude dieser Dienstleister zu finden ist. Der "provider" legt fest, welche Leistungen ("request") an einem "scope" verfügbar sind. Ein "provider" kann mehrere zugehörige "scope"-Objekte haben.
  - name: scope
    description: |
      Neben dem "provider" gibt es einen "scope". Dieser "scope" umfasst vor allem einem Terminkalender und daneben einen Warteraum (oder auch Aufrufanlage, "calldisplay") und Arbeitsplätze ("workstation"). Wenn mehrere "scope"-Objekte sich einen Warteraum ("calldisplay") und Arbeitsplätze ("workstation") teilen, können diese von einem "cluster" zusammengefasst werden. Dabei müssen die "scope" im Falle eines "cluster" nicht zum selben "provider" gehören.
paths:
  /services/:
    get:
      summary: Get the list of services
      tags:
        - services
      responses:
        '200':
          description: List of services
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/services.json
  /scopes/:
    get:
      summary: Get the list of scopes
      tags:
        - scopes
      responses:
        '200':
          description: List of scopes
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/scopes.json
  /offices/:
    get:
      summary: Get the list of offices
      tags:
        - offices
      responses:
        '200':
          description: List of offices
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/offices.json
  /offices-and-services/:
    get:
      summary: Get the relations between offices and services
      tags:
        - offices-services
      responses:
        '200':
          description: List of office-service relations
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/offices-and-services.json
  /scope-by-id/:
    get:
      summary: Get a scope by ID
      tags:
        - scopes
      parameters:
        - name: id
          description: Scope ID
          in: query
          required: true
          type: integer
      responses:
        '200':
          description: Scope details
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/scope.json
        '404':
          description: Scope not found
  /services-by-office/:
    get:
      summary: Get the services offered by a specific office
      tags:
        - services
      parameters:
        - name: officeId
          description: Office ID
          in: query
          required: true
          type: integer
      responses:
        '200':
          description: List of services for the office
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/services-by-office.json
  /offices-by-service/:
    get:
      summary: Get the offices that offer a specific service
      tags:
        - offices
      parameters:
        - name: serviceId
          description: Service ID
          in: query
          required: true
          type: integer
      responses:
        '200':
          description: List of offices offering the service
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/offices-by-service.json
  /available-days/:
    get:
      summary: Get the list of available days for appointments
      tags:
        - appointments
      parameters:
        - name: officeId
          description: Office ID
          in: query
          required: true
          type: integer
        - name: serviceId
          description: Service ID
          in: query
          required: true
          type: integer
      responses:
        '200':
          description: List of available days
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/available-days.json
  /available-appointments/:
    get:
      summary: Get available appointments for a specific day
      tags:
        - appointments
      parameters:
        - name: date
          description: Date in format YYYY-MM-DD
          in: query
          required: true
          type: string
        - name: officeId
          description: Office ID
          in: query
          required: true
          type: integer
        - name: serviceId
          description: Service ID
          in: query
          required: true
          type: integer
      responses:
        '200':
          description: List of available appointments
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/available-appointments.json
  /appointment/:
    get:
      summary: Get an appointment by process ID
      tags:
        - appointments
      parameters:
        - name: processId
          description: Process ID
          in: query
          required: true
          type: integer
        - name: authKey
          description: Authentication key
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Appointment details
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/appointment.json
        '400':
          description: Invalid input
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    msg:
                      type: string
                    path:
                      type: string
                    location:
                      type: string
        '404':
          description: Appointment not found
  /captcha-details/:
    get:
      summary: Get CAPTCHA details
      tags:
        - captcha
      responses:
        '200':
          description: CAPTCHA details
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/captcha-details.json
  /reserve-appointment/:
    post:
      summary: Reserve an appointment
      tags:
        - appointments
      parameters:
        - name: appointment
          description: Appointment reservation data
          in: body
          required: true
          schema:
            $ref: schema/citizenapi/appointment-reserve.json
      responses:
        '200':
          description: Reservation successful
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/appointment.json
        '400':
          description: Invalid input
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    msg:
                      type: string
                    path:
                      type: string
                    location:
                      type: string
        '404':
          description: Appointment not found
  /update-appointment/:
    post:
      summary: Update an appointment
      tags:
        - appointments
      parameters:
        - name: appointment
          description: Appointment update data
          in: body
          required: true
          schema:
            $ref: schema/citizenapi/appointment-update.json
      responses:
        '200':
          description: Update successful
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/appointment.json
        '400':
          description: Invalid input
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    msg:
                      type: string
                    path:
                      type: string
                    location:
                      type: string
        '404':
          description: Appointment not found
  /confirm-appointment/:
    post:
      summary: Confirm an appointment
      tags:
        - appointments
      parameters:
        - name: appointment
          description: Appointment confirmation data
          in: body
          required: true
          schema:
            $ref: schema/citizenapi/appointment-confirm.json
      responses:
        '200':
          description: Confirmation successful
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/appointment.json
        '400':
          description: Invalid input
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    msg:
                      type: string
                    path:
                      type: string
                    location:
                      type: string
        '404':
          description: Appointment not found
  /preconfirm-appointment/:
    post:
      summary: Preconfirm an appointment
      tags:
        - appointments
      parameters:
        - name: appointment
          description: Appointment preconfirmation data
          in: body
          required: true
          schema:
            $ref: schema/citizenapi/appointment-preconfirm.json
      responses:
        '200':
          description: Preconfirmation successful
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/appointment.json
        '400':
          description: Invalid input
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    msg:
                      type: string
                    path:
                      type: string
                    location:
                      type: string
        '404':
          description: Appointment not found
  /cancel-appointment/:
    post:
      summary: Cancel an appointment
      tags:
        - appointments
      parameters:
        - name: appointment
          description: Appointment cancellation data
          in: body
          required: true
          schema:
            $ref: schema/citizenapi/appointment-cancel.json
      responses:
        '200':
          description: Cancellation successful
          schema:
            type: object
            properties:
              meta:
                $ref: schema/metaresult.json
              data:
                $ref: schema/citizenapi/appointment.json
        '400':
          description: Invalid input
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    msg:
                      type: string
                    path:
                      type: string
                    location:
                      type: string
        '404':
          description: Appointment not found
definitions:
  apikey:
    $ref: "schema/apikey.json"
  apiclient:
    $ref: "schema/apiclient.json"
  appointment:
    $ref: "schema/appointment.json"
  availability:
    $ref: "schema/availability.json"
  calendar:
    $ref: "schema/calendar.json"
  calldisplay:
    $ref: "schema/calldisplay.json"
  client:
    $ref: "schema/client.json"
  cluster:
    $ref: "schema/cluster.json"
  config:
    $ref: "schema/config.json"
  contact:
    $ref: "schema/contact.json"
  day:
    $ref: "schema/day.json"
  department:
    $ref: "schema/department.json"
  dayoff:
    $ref: "schema/dayoff.json"
  exchange:
    $ref: "schema/exchange.json"
  link:
    $ref: "schema/link.json"
  log:
    $ref: "schema/log.json"
  mail:
    $ref: "schema/mail.json"
  mimepart:
    $ref: "schema/mimepart.json"
  metaresult:
    $ref: "schema/metaresult.json"
  notification:
    $ref: "schema/notification.json"
  organisation:
    $ref: "schema/organisation.json"
  owner:
    $ref: "schema/owner.json"
  process:
    $ref: "schema/process.json"
  provider:
    $ref: "schema/provider.json"
  queue:
    $ref: "schema/queue.json"
  request:
    $ref: "schema/request.json"
  requestrelation:
    $ref: "schema/requestrelation.json"
  scope:
    $ref: "schema/scope.json"
  session:
    $ref: "schema/session.json"
  slot:
    $ref: "schema/slot.json"
  source:
    $ref: "schema/source.json"
  status:
    $ref: "schema/status.json"
  ticketprinter:
    $ref: "schema/ticketprinter.json"
  useraccount:
    $ref: "schema/useraccount.json"
  workstation:
    $ref: "schema/workstation.json"