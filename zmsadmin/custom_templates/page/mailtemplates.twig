{% extends "layout/main.twig" %}
{% from 'element/helper/snippets.twig' import headline1 %}
{% block headline %}
    {{ headline1("Mail Templates") }}
{% endblock %}

{% block content %}

    {% embed "block/scaffholding/board.twig" with {'class': 'board--spaceless config-view', 'data': {'includeurl':includeUrl() }} %}

        {% block board_title %}
        {% endblock %}

        {% block board_body %}

        {% for settings in mailtemplates %}
            <b>{{ settings.name }}</b>
            <div id="save-indicator-editor-{{ loop.index }}" class="save-indicator" style="display: none; color: red; margin-left: 10px; inline;"></div>
            <div style="width: 100%; margin-bottom: 24px; padding: 24px; padding-bottom: 0px; box-sizing: border-box; border: 1px solid #ccc;">
                <div id="editor-{{ loop.index }}" style="width: 100%; height: 352px;"></div>
                <div style="display: flex; justify-content: flex-end; margin-top: 12px;">
                    <button class="button button-submit" onclick="saveMailTemplate('{{ settings.name }}', 'editor-{{ loop.index }}')">Save</button>
                </div>
            </div>
        {% endfor %}

        {% endblock %}

    {% endembed %}



    <!-- Load Require.js from CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
    <script>
        var editors = {};

        require.config({
            paths: {
                'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs',
            }
        });

        function initializeEditor(elementId, defaultCode) {
            require(['vs/editor/editor.main'], function() {
                // Create the editor instance and store it in the global 'editors' object
                editors[elementId] = monaco.editor.create(document.getElementById(elementId), {
                    value: defaultCode,
                    language: 'javascript',
                    theme: 'vs-dark'
                });

                // Add a change listener to the editor
                editors[elementId].onDidChangeModelContent(function() {
                    var saveIndicator = document.getElementById('save-indicator-' + elementId);
                    if (saveIndicator) {
                        saveIndicator.style.display = 'inline'; // Show the save indicator when content is changed
                        saveIndicator.textContent = 'Unsaved changes';
                    }
                });
            });
        }

        function getContentOfEditor(editorId) {
            // Access the editor instance by its ID from the global 'editors' object and return its current content
            var editor = editors[editorId];
            if (editor) {
                return editor.getValue();
            } else {
                console.error('Editor not found:', editorId);
                return ''; // Return an empty string if the editor is not found
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            {% for settings in mailtemplates %}
                initializeEditor('editor-{{ loop.index }}', '{{ settings.value | escape('js') }}');
            {% endfor %}
        });        


        function saveMailTemplate(templateName, editorId) {
            const url = '/terminvereinbarung/admin/mailtemplates/';
            const data = {
                templateName: templateName,
                templateContent: getContentOfEditor(editorId)
            };

            fetch(url, {
                method: 'POST', 
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data), 
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                var saveIndicator = document.getElementById('save-indicator-' + editorId);
                if (saveIndicator) {
                    saveIndicator.style.display = 'none'; // Hide the save indicator once changes are saved
                }
            })
            .catch((error) => console.error('Error:', error));
        }

    </script>
    

{% endblock %}
