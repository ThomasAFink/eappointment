{"mappings":"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","sources":["<anon>","js/index.js","js/settings.js","js/block/queueList.js","js/lib/baseview.js","js/block/ringAudio.js","js/block/waitingInfo.js","js/block/analogClock.js","js/block/qrCode.js"],"sourcesContent":["var $4mNRz$jquery = require(\"jquery\");\nvar $4mNRz$qrcodegenerator = require(\"qrcode-generator\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n// --------------------------------------------------------\n// ZMS Admin behavior\n// --------------------------------------------------------\n// Import base libs\n\nvar $869ace08486dab2f$export$2e2bcd8739ae039 = {\n    \"tableLayout\": {\n        \"multiColumns\": 1,\n        \"maxResults\": 5,\n        \"head\": {\n            \"left\": \"Nummer\",\n            \"right\": \"Platz\"\n        }\n    },\n    \"collections\": {},\n    \"queue\": {\n        \"calledIds\": \"\",\n        \"timeUntilOld\": 60,\n        \"timeWaitingInfo\": 20,\n        \"status\": \"called,pickup\",\n        \"showOnlyNumeric\": false\n    },\n    \"reloadInterval\": 10,\n    \"animationEnd\": \"webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend\",\n    \"qrCode\": {\n        version: 10,\n        ecLevel: \"M\",\n        fillColor: \"#000\",\n        backgroundColor: \"#fff\",\n        text: \"no text\",\n        quiet: 5\n    }\n};\n\n\n\nclass $893dc8f5d274a88f$var$BaseView {\n    constructor(element){\n        this.$main = (0, ($parcel$interopDefault($4mNRz$jquery)))(element);\n    }\n    get $() {\n        return this.$main;\n    }\n    bindPublicMethods(...methods) {\n        let object = this;\n        methods.forEach(function(method) {\n            if (typeof object[method] !== \"function\") throw \"Method not found: \" + method;\n            object[method] = object[method].bind(object);\n        });\n    }\n}\nvar $893dc8f5d274a88f$export$2e2bcd8739ae039 = $893dc8f5d274a88f$var$BaseView;\n\n\n\n\n\nclass $862442dfe9203e0a$var$View extends (0, $893dc8f5d274a88f$export$2e2bcd8739ae039) {\n    constructor(element){\n        super(element);\n        this.bindPublicMethods(\"initSoundCheck\");\n    }\n    initSoundCheck() {\n        let audioPlay = (0, ($parcel$interopDefault($4mNRz$jquery)))(\"#ring\");\n        if (this.hasNewQueueId()) audioPlay.get(0).play();\n        let newQueueIds = this.getCalledQueueIds();\n        this.writeCalledQueueIds(newQueueIds);\n    }\n    getNewQueueIds() {\n        let newQueueIds = this.getCalledQueueIds();\n        let oldQueueIds = window.bo.zmscalldisplay.queue.calledIds;\n        let diff = (0, ($parcel$interopDefault($4mNRz$jquery)))(newQueueIds).not(oldQueueIds).get();\n        return diff;\n    }\n    hasNewQueueId() {\n        return 0 < this.getNewQueueIds().length;\n    }\n    getCalledQueueIds() {\n        let queueIds = [];\n        (0, ($parcel$interopDefault($4mNRz$jquery)))(\"#queueImport td.wartenummer span[data-status]\").each(function() {\n            if (\"called\" == (0, ($parcel$interopDefault($4mNRz$jquery)))(this).attr(\"data-status\") || \"pickup\" == (0, ($parcel$interopDefault($4mNRz$jquery)))(this).attr(\"data-status\")) queueIds.push((0, ($parcel$interopDefault($4mNRz$jquery)))(this).attr(\"data-appointment\"));\n        });\n        queueIds.sort((a, b)=>{\n            return a - b;\n        }).join(\",\");\n        return queueIds;\n    }\n    writeCalledQueueIds(newQueueIds) {\n        window.bo.zmscalldisplay.queue.calledIds = newQueueIds;\n    }\n}\nvar $862442dfe9203e0a$export$2e2bcd8739ae039 = $862442dfe9203e0a$var$View;\n\n\nclass $63cb5386254838c6$var$View extends (0, $893dc8f5d274a88f$export$2e2bcd8739ae039) {\n    constructor(element){\n        super(element);\n        this.bindPublicMethods(\"initRequest\", \"setInterval\");\n        console.log(\"Found queueList container\");\n        (0, ($parcel$interopDefault($4mNRz$jquery)))(window).on(\"load\", ()=>{\n            this.initRequest();\n        });\n        (0, ($parcel$interopDefault($4mNRz$jquery))).ajaxSetup({\n            cache: false\n        });\n    }\n    initRequest() {\n        const ajaxopt = {\n            type: \"POST\",\n            url: this.getUrl(\"/queue/\"),\n            data: window.bo.zmscalldisplay,\n            timeout: window.bo.zmscalldisplay.reloadInterval * 1000 - 100\n        };\n        (0, ($parcel$interopDefault($4mNRz$jquery))).ajax(ajaxopt).done((data)=>{\n            this.hideMessages(0);\n            (0, ($parcel$interopDefault($4mNRz$jquery)))(\"#queueImport\").html(data);\n            var audioCheck = new (0, $862442dfe9203e0a$export$2e2bcd8739ae039)();\n            // currently the logic to detect new queue ids is located in the RingAudio\n            // we should probably pull this functionality out of RingAudio and refactor it. \n            let newIds = audioCheck.getNewQueueIds();\n            newIds.forEach((id)=>{\n                var spansToBlink = (0, ($parcel$interopDefault($4mNRz$jquery)))('span[data-appointment=\"' + id + '\"]');\n                this.blinkElements(spansToBlink, 3, 900);\n            });\n            audioCheck.initSoundCheck();\n            this.getDestinationToNumber();\n        }).fail(function() {\n            (0, ($parcel$interopDefault($4mNRz$jquery)))(\".fatal\").show();\n        });\n        this.setInterval();\n    }\n    setInterval() {\n        var reloadTime = window.bo.zmscalldisplay.reloadInterval;\n        setTimeout(this.initRequest, reloadTime * 1000);\n    }\n    getUrl(relativePath) {\n        let includepath = window.bo.zmscalldisplay.includepath;\n        return includepath + relativePath;\n    }\n    getDestinationToNumber() {\n        if (window.bo.zmscalldisplay.queue.showOnlyNumeric) (0, ($parcel$interopDefault($4mNRz$jquery)))(\"#queueImport .destination\").each(function() {\n            let string = (0, ($parcel$interopDefault($4mNRz$jquery)))(this).text();\n            let regex = /\\d/g;\n            if (regex.test(string)) (0, ($parcel$interopDefault($4mNRz$jquery)))(this).text(string.replace(/\\D/g, \"\"));\n        });\n    }\n    hideMessages(delay = 5000) {\n        let message = (0, ($parcel$interopDefault($4mNRz$jquery))).find(\"[data-hide-message]\");\n        if (message.length) setTimeout(()=>{\n            (0, ($parcel$interopDefault($4mNRz$jquery)))(message).fadeOut();\n        }, delay);\n    }\n    async blinkElements(elements, blinkCount, blinkTime) {\n        var blinkColor = \"rgb(27, 152, 213)\";\n        const blinkAllOnce = async ()=>{\n            // Store the original colors for each element\n            const originalColors = elements.map(function() {\n                return (0, ($parcel$interopDefault($4mNRz$jquery)))(this).css(\"color\");\n            });\n            // Set all elements to the blink color\n            elements.css(\"color\", blinkColor);\n            await new Promise((resolve)=>setTimeout(resolve, blinkTime));\n            // Reset all elements to their original colors\n            elements.each(function(index) {\n                (0, ($parcel$interopDefault($4mNRz$jquery)))(this).css(\"color\", originalColors[index]);\n            });\n            await new Promise((resolve)=>setTimeout(resolve, blinkTime));\n        };\n        for(let i = 0; i < blinkCount; i++)await blinkAllOnce();\n    }\n}\nvar $63cb5386254838c6$export$2e2bcd8739ae039 = $63cb5386254838c6$var$View;\n\n\n\n\nclass $bc48320c90f54952$var$View {\n    constructor(){\n        setInterval(this.setClock, 1000);\n        this.setDate();\n    }\n    setClock() {\n        if (document.querySelector(\".second-hand\")) this.setAnalogClock();\n        if (document.querySelector(\".digital-clock\")) {\n            const now = new Date();\n            document.querySelector(\".digital-clock\").innerHTML = new Intl.DateTimeFormat(\"de-DE\", {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            }).format(now);\n            document.querySelector(\".digital-datum\").innerHTML = new Intl.DateTimeFormat(\"de-DE\", {\n                weekday: \"long\",\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\"\n            }).format(now);\n        }\n    }\n    setAnalogClock() {\n        const now = new Date();\n        const secondHand = document.querySelector(\".second-hand\");\n        const minsHand = document.querySelector(\".min-hand\");\n        const hourHand = document.querySelector(\".hour-hand\");\n        const seconds = now.getSeconds();\n        const secondsDegrees = seconds / 60 * 360 + 90;\n        secondHand.style.transform = `rotate(${secondsDegrees}deg)`;\n        const mins = now.getMinutes();\n        const minsDegrees = mins / 60 * 360 + seconds / 60 * 6 + 90;\n        minsHand.style.transform = `rotate(${minsDegrees}deg)`;\n        const hour = now.getHours();\n        const hourDegrees = hour / 12 * 360 + mins / 60 * 30 + 90;\n        hourHand.style.transform = `rotate(${hourDegrees}deg)`;\n    }\n    setDate() {\n        const dateString = document.querySelector(\"#aufrufanzeige_Datum\");\n        const now = new Date();\n        let options = {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"2-digit\",\n            day: \"2-digit\"\n        };\n        if (dateString) dateString.innerHTML = new Intl.DateTimeFormat(\"de-DE\", options).format(now);\n    }\n}\nvar $bc48320c90f54952$export$2e2bcd8739ae039 = $bc48320c90f54952$var$View;\n\n\nclass $b3ce31f39c074c71$var$View extends (0, $893dc8f5d274a88f$export$2e2bcd8739ae039) {\n    constructor(element){\n        super(element);\n        this.bindPublicMethods(\"load\", \"setInterval\");\n        console.log(\"Found waitingInfo container\");\n        (0, ($parcel$interopDefault($4mNRz$jquery)))(window).on(\"load\", ()=>{\n            this.load();\n        });\n        (0, ($parcel$interopDefault($4mNRz$jquery))).ajaxSetup({\n            cache: false\n        });\n    }\n    load() {\n        new (0, $bc48320c90f54952$export$2e2bcd8739ae039)();\n        const ajaxopt = {\n            type: \"POST\",\n            url: this.getUrl(\"/waitinginfo/\"),\n            data: window.bo.zmscalldisplay,\n            timeout: window.bo.zmscalldisplay.queue.timeWaitingInfo * 1000 - 100\n        };\n        (0, ($parcel$interopDefault($4mNRz$jquery))).ajax(ajaxopt).done((data)=>{\n            this.hideMessages(0);\n            this.setWaitingClients(data);\n            this.setWaitingTime(data);\n        }).fail(function() {\n            (0, ($parcel$interopDefault($4mNRz$jquery)))(\".fatal\").show();\n        });\n        this.setInterval();\n    }\n    setInterval() {\n        var reloadTime = window.bo.zmscalldisplay.queue.timeWaitingInfo;\n        setTimeout(this.load, reloadTime * 1000);\n    }\n    getUrl(relativePath) {\n        let includepath = window.bo.zmscalldisplay.includepath;\n        return includepath + relativePath;\n    }\n    setWaitingClients(data) {\n        var waitingClients = (0, ($parcel$interopDefault($4mNRz$jquery)))(data).filter(\"div#waitingClients\").text();\n        if (0 <= waitingClients) (0, ($parcel$interopDefault($4mNRz$jquery)))(\"#wartende\").html(waitingClients);\n    }\n    setWaitingTime(data) {\n        var waitingTime = (0, ($parcel$interopDefault($4mNRz$jquery)))(data).filter(\"div#waitingTime\").text();\n        (0, ($parcel$interopDefault($4mNRz$jquery)))(\"#wartezeit\").html(waitingTime);\n    }\n    hideMessages(delay = 5000) {\n        let message = (0, ($parcel$interopDefault($4mNRz$jquery))).find(\"[data-hide-message]\");\n        if (message.length) setTimeout(()=>{\n            (0, ($parcel$interopDefault($4mNRz$jquery)))(message).fadeOut();\n        }, delay);\n    }\n}\nvar $b3ce31f39c074c71$export$2e2bcd8739ae039 = $b3ce31f39c074c71$var$View;\n\n\n\n\n\nclass $758c945e6e180b3d$var$View extends (0, $893dc8f5d274a88f$export$2e2bcd8739ae039) {\n    constructor(element){\n        super(element);\n        this.bindPublicMethods(\"initQrCode\");\n        console.log(\"Found qrCode\");\n        (0, ($parcel$interopDefault($4mNRz$jquery)))(window).on(\"load\", ()=>{\n            this.initQrCode();\n        });\n    }\n    initQrCode() {\n        let options = window.bo.zmscalldisplay.qrCode;\n        let instance = this;\n        (0, ($parcel$interopDefault($4mNRz$jquery)))(\"canvas.qrCode\").each(function(index, element) {\n            if (element.nodeName !== \"CANVAS\") return;\n            options.size = Math.min(element.offsetWidth, element.offsetHeight);\n            options.text = window.location.origin + (0, ($parcel$interopDefault($4mNRz$jquery)))(element).data(\"text\");\n            instance.drawQrCode(element, options);\n        });\n    }\n    drawQrCode(canvas, options) {\n        (0, ($parcel$interopDefault($4mNRz$qrcodegenerator))).stringToBytes = (0, ($parcel$interopDefault($4mNRz$qrcodegenerator))).stringToBytesFuncs[\"UTF-8\"];\n        const codeObj = (0, ($parcel$interopDefault($4mNRz$qrcodegenerator)))(options.version, options.ecLevel);\n        codeObj.addData(options.text);\n        codeObj.make();\n        let ctx = canvas.getContext(\"2d\");\n        ctx.fillStyle = options.backgroundColor;\n        ctx.fillRect(0, 0, options.size, options.size);\n        const gridSize = codeObj.getModuleCount();\n        const blockSize = options.size / (gridSize + 2 * options.quiet);\n        const offset = options.quiet * blockSize; // quiet zone\n        ctx.beginPath();\n        ctx.fillStyle = options.fillColor;\n        for(let row = 0; row < gridSize; row += 1)for(let col = 0; col < gridSize; col += 1){\n            let top = offset + row * blockSize;\n            let left = offset + col * blockSize;\n            if (codeObj.isDark(row, col)) ctx.rect(left, top, blockSize, blockSize);\n        }\n        ctx.fill();\n    }\n}\nvar $758c945e6e180b3d$export$2e2bcd8739ae039 = $758c945e6e180b3d$var$View;\n\n\nwindow.bo = {\n    \"zmscalldisplay\": (0, $869ace08486dab2f$export$2e2bcd8739ae039)\n};\n// Init Views\n(0, ($parcel$interopDefault($4mNRz$jquery)))(\"#queueImport\").each(function() {\n    new (0, $63cb5386254838c6$export$2e2bcd8739ae039)();\n    new (0, $b3ce31f39c074c71$export$2e2bcd8739ae039)();\n});\nnew (0, $758c945e6e180b3d$export$2e2bcd8739ae039)();\n// Say hello\nconsole.log(\"Welcome to the ZMS Calldisplay interface...\");\n\n\n//# sourceMappingURL=index.js.map\n","// --------------------------------------------------------\n// ZMS Admin behavior\n// --------------------------------------------------------\n\n// Import base libs\nimport $ from \"jquery\";\nimport settings from './settings';\n\nwindow.bo = {\n    \"zmscalldisplay\": settings\n};\n\n// Import Views\nimport QueueList from \"./block/queueList\";\nimport WaitingInfo from \"./block/waitingInfo\";\nimport QrCode from \"./block/qrCode\";\n\n// Init Views\n$('#queueImport').each(function() { \n    new QueueList();\n    new WaitingInfo();\n});\nnew QrCode();\n\n// Say hello\nconsole.log(\"Welcome to the ZMS Calldisplay interface...\");\n","export default {\n    'tableLayout' : {\n        'multiColumns' : 1,\n        'maxResults' : 5,\n        'head' : {\n            'left' : 'Nummer',\n            'right' : 'Platz'\n        }\n    },\n    'collections': {\n    },\n    'queue': {\n        'calledIds' : '',\n        'timeUntilOld': 60,\n        'timeWaitingInfo': 20,\n        'status': 'called,pickup',\n        'showOnlyNumeric':false\n    },\n    'reloadInterval': 10,\n    'animationEnd': 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend',\n    \"qrCode\": {\n        version: 10,\n        ecLevel: 'M',\n        fillColor: '#000',\n        backgroundColor: '#fff',\n        text: 'no text',\n        quiet: 5,\n    }\n};\n","import BaseView from '../lib/baseview';\nimport $ from \"jquery\";\nimport RingAudio from \"./ringAudio\";\n\nclass View extends BaseView {\n\n    constructor(element) {\n        super(element);\n        this.bindPublicMethods('initRequest', 'setInterval');\n        console.log('Found queueList container');\n        $(window).on(\n            'load', () => {\n                this.initRequest();\n            }\n        );\n        $.ajaxSetup({ cache: false });\n    }\n\n    initRequest() {\n        const ajaxopt = {\n            type: \"POST\",\n            url: this.getUrl('/queue/'),\n            data: window.bo.zmscalldisplay,\n            timeout: ((window.bo.zmscalldisplay.reloadInterval * 1000) - 100)\n        };\n        $.ajax(ajaxopt)\n            .done(data => {\n                this.hideMessages(0);\n                $('#queueImport').html(data);\n                var audioCheck = new RingAudio();\n                \n                // currently the logic to detect new queue ids is located in the RingAudio\n                // we should probably pull this functionality out of RingAudio and refactor it. \n                let newIds = audioCheck.getNewQueueIds();\n                newIds.forEach((id) => {\n                    var spansToBlink = $('span[data-appointment=\"' + id + '\"]');\n                    this.blinkElements(spansToBlink, 3, 900);\n                  });\n                \n                audioCheck.initSoundCheck();\n                this.getDestinationToNumber();\n            })\n            .fail(function () {\n                $('.fatal').show();\n            });\n        this.setInterval();\n    }\n\n    setInterval() {\n        var reloadTime = window.bo.zmscalldisplay.reloadInterval;\n        setTimeout(this.initRequest, reloadTime * 1000);\n    }\n\n    getUrl(relativePath) {\n        let includepath = window.bo.zmscalldisplay.includepath;\n        return includepath + relativePath;\n    }\n\n    getDestinationToNumber() {\n        if (window.bo.zmscalldisplay.queue.showOnlyNumeric) {\n            $('#queueImport .destination').each(function () {\n                let string = $(this).text();\n                let regex = /\\d/g;\n                if (regex.test(string)) {\n                    $(this).text(string.replace(/\\D/g, ''));\n                }\n            });\n        }\n    }\n\n    hideMessages(delay = 5000) {\n        let message = $.find('[data-hide-message]');\n        if (message.length) {\n            setTimeout(() => {\n                $(message).fadeOut();\n            }, delay)\n        }\n    }\n\n    async blinkElements(elements, blinkCount, blinkTime) {\n        var blinkColor = 'rgb(27, 152, 213)';\n    \n        const blinkAllOnce = async () => {\n            // Store the original colors for each element\n            const originalColors = elements.map(function() {\n                return $(this).css('color');\n            });\n    \n            // Set all elements to the blink color\n            elements.css('color', blinkColor);\n            await new Promise(resolve => setTimeout(resolve, blinkTime));\n    \n            // Reset all elements to their original colors\n            elements.each(function(index) {\n                $(this).css('color', originalColors[index]);\n            });\n            await new Promise(resolve => setTimeout(resolve, blinkTime));\n        };\n    \n        for (let i = 0; i < blinkCount; i++) {\n            await blinkAllOnce();\n        }\n    }\n            \n}\n\nexport default View;\n","import $ from \"jquery\";\n\nclass BaseView {\n\n    constructor(element) {\n        this.$main = $(element);\n    }\n\n    get $ () {\n        return this.$main;\n    }\n\n    bindPublicMethods (...methods) {\n        let object = this;\n        methods.forEach( function (method) {\n            if (typeof object[method] !== 'function') {\n                throw \"Method not found: \" + method;\n            }\n            object[method] = object[method].bind(object);\n        });\n    }\n}\n\nexport default BaseView;\n","import BaseView from '../lib/baseview';\nimport $ from \"jquery\";\n\nclass View extends BaseView {\n\n    constructor(element) {\n        super(element);\n        this.bindPublicMethods('initSoundCheck');\n    }\n\n\n    initSoundCheck() {\n        let audioPlay = $(\"#ring\");\n        if (this.hasNewQueueId()) {\n            audioPlay.get(0).play();\n        }\n        let newQueueIds = this.getCalledQueueIds();\n        this.writeCalledQueueIds(newQueueIds);\n    }\n\n    getNewQueueIds() {\n        let newQueueIds = this.getCalledQueueIds();\n        let oldQueueIds = window.bo.zmscalldisplay.queue.calledIds;\n        let diff = $(newQueueIds).not(oldQueueIds).get();\n        return diff;\n    }\n\n    hasNewQueueId() {\n        return (0 < this.getNewQueueIds().length);\n    }\n\n    getCalledQueueIds() {\n        let queueIds = [];\n        $('#queueImport td.wartenummer span[data-status]').each(function () {\n            if ('called' == $(this).attr('data-status') || 'pickup' == $(this).attr('data-status')) {\n                queueIds.push($(this).attr('data-appointment'));\n            }\n            \n        });\n        queueIds.sort((a, b) => { return a - b; }).join(',');\n        return queueIds;\n    }\n\n    writeCalledQueueIds(newQueueIds) {\n        window.bo.zmscalldisplay.queue.calledIds = newQueueIds;\n    }\n}\n\nexport default View;\n","import BaseView from '../lib/baseview';\nimport $ from \"jquery\";\nimport AnalogClock from \"./analogClock\";\n\nclass View extends BaseView {\n\n    constructor(element) {\n        super(element);\n        this.bindPublicMethods('load', 'setInterval');\n        console.log('Found waitingInfo container');\n        $(window).on(\n            'load', () => {\n                this.load();\n            }\n        );\n        $.ajaxSetup({ cache: false });\n    }\n\n    load() {\n        new AnalogClock();\n        const ajaxopt = {\n            type: \"POST\",\n            url: this.getUrl('/waitinginfo/'),\n            data: window.bo.zmscalldisplay,\n            timeout: ((window.bo.zmscalldisplay.queue.timeWaitingInfo * 1000) - 100)\n        };\n        $.ajax(ajaxopt)\n            .done(data => {\n                this.hideMessages(0);\n                this.setWaitingClients(data);\n                this.setWaitingTime(data);\n            })\n            .fail(function () {\n                $('.fatal').show();\n            });\n        this.setInterval();\n    }\n\n    setInterval() {\n        var reloadTime = window.bo.zmscalldisplay.queue.timeWaitingInfo;\n        setTimeout(this.load, reloadTime * 1000);\n    }\n\n    getUrl(relativePath) {\n        let includepath = window.bo.zmscalldisplay.includepath;\n        return includepath + relativePath;\n    }\n\n    setWaitingClients(data) {\n        var waitingClients = $(data).filter(\"div#waitingClients\").text();\n        if (0 <= waitingClients) {\n            $(\"#wartende\").html(waitingClients);\n        }\n    }\n\n    setWaitingTime(data) {\n        var waitingTime = $(data).filter(\"div#waitingTime\").text();\n        $(\"#wartezeit\").html(waitingTime);\n    }\n\n    hideMessages(delay = 5000) {\n        let message = $.find('[data-hide-message]');\n        if (message.length) {\n            setTimeout(() => {\n                $(message).fadeOut();\n            }, delay)\n        }\n    }\n}\n\nexport default View;\n","\nclass View {\n    constructor () {\n        setInterval(this.setClock, 1000);\n        this.setDate();\n\n    }\n\n    setClock() {\n        if (document.querySelector('.second-hand')) {\n            this.setAnalogClock();\n        }\n\n        if (document.querySelector('.digital-clock')) {\n            const now = new Date();\n\n            document.querySelector('.digital-clock').innerHTML =\n                new Intl.DateTimeFormat('de-DE', {hour: '2-digit', minute: '2-digit'}).format(now)\n\n            document.querySelector('.digital-datum').innerHTML =\n                new Intl.DateTimeFormat('de-DE', { weekday: 'long', year: 'numeric', month: '2-digit', day: '2-digit' }).format(now)\n        }\n    }\n\n    setAnalogClock() {\n        const now = new Date();\n\n        const secondHand = document.querySelector('.second-hand');\n        const minsHand = document.querySelector('.min-hand');\n        const hourHand = document.querySelector('.hour-hand');\n\n        const seconds = now.getSeconds();\n        const secondsDegrees = ((seconds / 60) * 360) + 90;\n        secondHand.style.transform = `rotate(${secondsDegrees}deg)`;\n\n        const mins = now.getMinutes();\n        const minsDegrees = ((mins / 60) * 360) + ((seconds/60)*6) + 90;\n        minsHand.style.transform = `rotate(${minsDegrees}deg)`;\n\n        const hour = now.getHours();\n        const hourDegrees = ((hour / 12) * 360) + ((mins/60)*30) + 90;\n        hourHand.style.transform = `rotate(${hourDegrees}deg)`;\n    }\n\n    setDate() {\n        const dateString = document.querySelector('#aufrufanzeige_Datum');\n        const now = new Date();\n        let options = { weekday: 'long', year: 'numeric', month: '2-digit', day: '2-digit' }\n\n        if (dateString) {\n            dateString.innerHTML = new Intl.DateTimeFormat('de-DE', options).format(now)\n        }\n    }\n}\n\nexport default View;\n","import BaseView from '../lib/baseview';\nimport $ from \"jquery\";\nimport qrGenerator from \"qrcode-generator\";\n\nclass View extends BaseView {\n\n    constructor(element) {\n        super(element);\n        this.bindPublicMethods('initQrCode');\n        console.log(\"Found qrCode\");\n        $(window).on(\n            'load', () => {\n                this.initQrCode();\n            }\n        );\n    }\n\n    initQrCode() {\n        let options = window.bo.zmscalldisplay.qrCode;\n        let instance = this;\n\n        $('canvas.qrCode').each(function(index, element) {\n            if (element.nodeName !== 'CANVAS') {\n                return;\n            }\n\n            options.size = Math.min(element.offsetWidth, element.offsetHeight);\n            options.text = window.location.origin + $(element).data('text');\n\n            instance.drawQrCode(element, options);\n        });\n    }\n\n    drawQrCode(canvas, options) {\n        qrGenerator.stringToBytes = qrGenerator.stringToBytesFuncs['UTF-8'];\n        const codeObj = qrGenerator(options.version, options.ecLevel);\n        codeObj.addData(options.text);\n        codeObj.make();\n\n        let ctx = canvas.getContext('2d');\n        ctx.fillStyle = options.backgroundColor;\n        ctx.fillRect(0, 0, options.size, options.size);\n\n        const gridSize  = codeObj.getModuleCount();\n        const blockSize = options.size / (gridSize + 2 * options.quiet);\n        const offset    = options.quiet * blockSize; // quiet zone\n\n        ctx.beginPath();\n        ctx.fillStyle = options.fillColor;\n        for (let row = 0; row < gridSize; row += 1) {\n            for (let col = 0; col < gridSize; col += 1) {\n                let top  = offset + row * blockSize;\n                let left = offset + col * blockSize;\n\n                if (codeObj.isDark(row, col)) {\n                    ctx.rect(left, top, blockSize, blockSize);\n                }\n            }\n        }\n\n        ctx.fill();\n    }\n}\n\nexport default View;\n"],"names":["$4mNRz$jquery","require","$4mNRz$qrcodegenerator","$parcel$interopDefault","a","__esModule","default","$893dc8f5d274a88f$export$2e2bcd8739ae039","constructor","element","$main","$","bindPublicMethods","methods","object","forEach","method","bind","$862442dfe9203e0a$export$2e2bcd8739ae039","initSoundCheck","audioPlay","hasNewQueueId","get","play","newQueueIds","getCalledQueueIds","writeCalledQueueIds","getNewQueueIds","oldQueueIds","window","bo","zmscalldisplay","queue","calledIds","not","length","queueIds","each","attr","push","sort","b","join","$63cb5386254838c6$export$2e2bcd8739ae039","console","log","on","initRequest","ajaxSetup","cache","ajaxopt","type","url","getUrl","data","timeout","reloadInterval","ajax","done","hideMessages","html","audioCheck","newIds","id","spansToBlink","blinkElements","getDestinationToNumber","fail","show","setInterval","reloadTime","setTimeout","relativePath","includepath","showOnlyNumeric","string","text","regex","test","replace","delay","message","find","fadeOut","elements","blinkCount","blinkTime","blinkAllOnce","originalColors","map","css","Promise","resolve","index","i","$bc48320c90f54952$export$2e2bcd8739ae039","setClock","setDate","document","querySelector","setAnalogClock","now","Date","innerHTML","Intl","DateTimeFormat","hour","minute","format","weekday","year","month","day","secondHand","minsHand","hourHand","seconds","getSeconds","style","transform","mins","getMinutes","getHours","dateString","$b3ce31f39c074c71$export$2e2bcd8739ae039","load","timeWaitingInfo","setWaitingClients","setWaitingTime","waitingClients","filter","waitingTime","$758c945e6e180b3d$export$2e2bcd8739ae039","initQrCode","options","qrCode","instance","nodeName","size","Math","min","offsetWidth","offsetHeight","location","origin","drawQrCode","canvas","stringToBytes","stringToBytesFuncs","codeObj","version","ecLevel","addData","make","ctx","getContext","fillStyle","backgroundColor","fillRect","gridSize","getModuleCount","blockSize","quiet","offset","beginPath","fillColor","row","col","top","left","isDark","rect","fill"],"version":3,"file":"index.js.map","sourceRoot":"../../"}